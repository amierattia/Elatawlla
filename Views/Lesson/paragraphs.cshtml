@model List<NetWork.Models.LessonParagraph>

@{
    ViewData["Title"] = "Lesson Paragraphs";
    Layout = User.IsInRole("Admin") ? "_Layout" : "_AccountLayout";
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .card {
        border: none;
        border-radius: 10px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    h1, h2 {
        text-align: center;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }

    .card-title {
        color: #2c3e50;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .card-text {
        color: #34495e;
        line-height: 1.8;
    }

    .paragraph-image {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .alert-info {
        background-color: #e9f5ff;
        border-color: #b6e0fe;
        color: #31708f;
    }

    pre.card-text {
        direction: rtl;
        text-align: right;
        width: 100%;
        white-space: pre-wrap;
        word-wrap: break-word;
        overflow-x: auto;
    }
</style>

<div class="container my-5">
    

    @if (Model != null && Model.Count > 0)
    {
        <div class="row">
            <div class="col-12">
                <h1 class="text-center mb-4">Lesson: @Model[0].Lesson.Title</h1>
            </div>
        </div>

        foreach (var paragraph in Model)
        {
            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <h2 class="card-title">@paragraph.Title</h2>

                    <pre class="card-text paragraph-content"
                         ondblclick="editParagraph(@paragraph.Id)"
                         id="text-@paragraph.Id">
                        @Html.Raw(paragraph.Content)
                    </pre>

                    @if (!string.IsNullOrEmpty(paragraph.VedioPath))
                    {
                        <div class="text-center my-3">
                            <video controls class="video-fluid" style="max-width: 100%; height: auto;">
                                <source src="~/videos/paragraphs/@paragraph.VedioPath" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(paragraph.AudioPath))
                    {
                        <div class="text-center my-3">
                            <audio controls class="audio-fluid" style="max-width: 100%;">
                                <source src="~/audios/paragraphs/@paragraph.AudioPath" type="audio/mpeg">
                                Your browser does not support the audio element.
                            </audio>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(paragraph.ImagePath))
                    {
                        <div class="text-center my-3">
                            <img src="~/images/paragraphs/@paragraph.ImagePath" alt="@paragraph.Title" class="img-fluid rounded paragraph-image" id="img-@paragraph.Id" style="max-width: 100%; height: auto;"/>                        </div>
                    }
                    @if (!string.IsNullOrEmpty(paragraph.ExternalLink))
                    {
                        <p>
                            <strong>lec link</strong>
                            <a href="@paragraph.ExternalLink" target="_blank">@paragraph.ExternalLink</a>
                        </p>

                    }
                    
                    

                    <textarea class="form-control paragraph-edit"
                              id="edit-@paragraph.Id"
                              style="display: none;">@paragraph.Content</textarea>

                    <button class="btn btn-success mt-2 save-btn"
                            id="save-@paragraph.Id"
                            style="display: none;"
                            onclick="saveParagraph(@paragraph.Id)">
                        Save
                    </button>



                



                    @if (User.IsInRole("Admin") || User.IsInRole("Instructor") || User.IsInRole("Suber_Instructor"))
                    {
                        <button
                            style="display: none;"

                            class="btn btn-warning mt-2"
                            onclick="changeImage(@paragraph.Id)">Update Image</button>
                        <button style="display: none;"
                                class="btn btn-danger mt-2 delete-btn"
                                id="delete-@paragraph.Id"
                                onclick="deleteParagraph(@paragraph.Id)">
                            Remove
                        </button>
                    }
                </div>
            </div>
        }
    }
</div>

@if (User.IsInRole("Admin") || User.IsInRole("Instructor") || User.IsInRole("Suber_Instructor"))
{


    <script>


        function addParagraphField() {
            var container = document.getElementById("paragraphs-container");

            var div = document.createElement("div");
            div.classList.add("paragraph-group", "mb-3");

            div.innerHTML = `
            <div class="form-group">
                <label>Paragraph Title</label>
                <input type="text" name="paragraphTitles" class="form-control" placeholder="Enter paragraph title">
            </div>
            <div class="form-group">
                <label>Paragraph Content</label>
                <textarea name="paragraphContents" class="form-control" rows="3" placeholder="Enter paragraph content"></textarea>
            </div>
            <div class="form-group">
                <label>Upload Image (Optional)</label>
                <input type="file" name="paragraphImages" accept="image/*" class="form-control">
            </div>
            <hr>
        <label for="paragraphVideos">Upload Videos</label>
        <input type="file" class="form-control" id="paragraphVideos" accept="video/*" name="paragraphVideos"  multiple>

        `;

            container.appendChild(div);
        }
        
        
    function editParagraph(id) {
        let textElement = document.getElementById(`text-${id}`);
        let textArea = document.getElementById(`edit-${id}`);
        let saveBtn = document.getElementById(`save-${id}`);
        let updateImageBtn = document.getElementById(`changeImage-${id}`);
        let deleteBtn = document.getElementById(`delete-${id}`);

        textArea.style.display = "block";
        textArea.focus();
        textElement.style.display = "none";
        saveBtn.style.display = "inline-block";

        if (updateImageBtn) updateImageBtn.style.display = "inline-block";
        if (deleteBtn) deleteBtn.style.display = "inline-block";
    }

    function saveParagraph(id) {
        let textArea = document.getElementById(`edit-${id}`);
        let textElement = document.getElementById(`text-${id}`);
        let saveBtn = document.getElementById(`save-${id}`);
        let updateImageBtn = document.getElementById(`changeImage-${id}`);
        let deleteBtn = document.getElementById(`delete-${id}`);
        let newContent = textArea.value;

        fetch('/Lesson/UpdateParagraph', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: id, content: newContent })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                textElement.innerText = newContent;
                textElement.style.display = "block";
                textArea.style.display = "none";
                saveBtn.style.display = "none";
                if (updateImageBtn) updateImageBtn.style.display = "none";
                if (deleteBtn) deleteBtn.style.display = "none";
            } else {
                alert("There Is Some Errors !");
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function changeImage(id) {
        document.getElementById(`file-${id}`).click();
    }

    function uploadImage(id) {
        let fileInput = document.getElementById(`file-${id}`);
        let formData = new FormData();
        formData.append("id", id);
        formData.append("image", fileInput.files[0]);

        fetch('/Lesson/UpdateImage', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById(`img-${id}`).src = data.newImagePath;
            } else {
                alert("Error !");
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function deleteParagraph(id) {
        if (!confirm("Are you sure to delete this Paragraph?")) {
            return;
        }

        fetch(`/Lesson/DeleteParagraph/${id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById(`text-${id}`).parentElement.remove();
            } else {
                alert("Error");
            }
        })
        .catch(error => console.error('Error:', error));
    }

    </script>

}

